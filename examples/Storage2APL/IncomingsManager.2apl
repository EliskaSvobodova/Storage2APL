include: person.2apl;


beliefs:
	start(0,0).
	state(waiting).
	clean_ig(blockworld) :- not bomb(1, 1).


beliefupdates:  	
  	{ state(waiting) } 		WaitForPickupStatus()	{ not state(waiting), state(waitForPickup) }
  	{ state(waitForPickup)}	WaitingStatus()			{ not state(waitForPickup), state(waiting) }


goals:
	clean_ig(blockworld).


plans:
  B(start(X,Y));
  @blockworld( enter( X, Y, blue ), _ );
  @blockworld( senseBombs(), BOMBS );
  if B(BOMBS = [[default, 1, 1] | REST]) then
  {
  	+ bomb(1, 1);
  }
  

pgrules:
	clean_ig( blockworld ) <- state(waiting) and bomb(X, Y) |
	{
  		send(shelves, request, assign(X, Y));
  		send(rm, request, assign(X, Y));
  		WaitForPickupStatus();
  	}
  	
  	clean_ig( blockworld ) <- bomb(Xb, Yb) and target_shelf(Xs, Ys) and worker(RIDER) |
  	{
		send(RIDER, inform, stockProduct(Xb, Yb, Xs, Ys));
		- target_shelf(Xs, Ys);
		- worker(RIDER);
  	}


pcrules:
	event(bombAt(1, 1), blockworld) <- true |
	{
		+ bomb(1, 1);
		adoptz(clean_ig(blockworld));
	}
	
	message(shelves, inform, La, On, shelf(X, Y)) <- true | {
		+ target_shelf(X, Y);
	}
	
	message(rm, inform, La, On, assigned(RIDER)) <- true | {
		+ worker(RIDER);
	}
	
	message(RIDER, inform, La, On, took_over(X, Y)) <- true | {
		- bomb(X, Y);
		WaitingStatus();
	}
	
	message(RIDER, inform, La, On, done(Xb, Yb, Xs, Ys)) <- true | {
		send(shelves, inform, full(Xs, Ys));
		send(rm, inform, free(RIDER));
	}
